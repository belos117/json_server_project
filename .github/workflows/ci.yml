name: CI

on:
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      TERRAFORM_STATE_TOKEN: ${{ secrets.TERRAFORM_STATE_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    

    - name: login to docker registry
      uses: docker/login-action@v3
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}

    - name: build and push docker image to registry
      uses: docker/build-push-action@v5
      with:
        context: json-server/
        push: true
        tags: stormhenkel/json-server:lts
    
    - name: Install jq
      run: sudo apt-get install -y jq

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_STATE_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false
      working-directory: ./app-server

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: terraform plan -input=false
      working-directory: ./app-server

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: terraform apply -auto-approve -input=false 
      working-directory: ./app-server

    - name: Parse Terraform output
      id: parse_output
      run: |
        IP=$(terraform output -json | jq -r '.server_ip.value')
        echo "Server IP: $IP"
        echo "::set-output name=HOST_IP::$IP"
      working-directory: ./app-server

    - name: Add HOST IP to GitHub Secrets
      run: |
        echo $HOST_IP > /tmp/host_ip.txt
      env:
        HOST_IP: ${{ steps.parse_output.outputs.HOST_IP }}